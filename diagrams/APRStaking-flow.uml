@startuml APRStaking

actor User
actor Owner
actor Staff

participant APRStaking as APRStaking

Owner -> APRStaking : initialize(daar, daarion, wallet1)
note right: Initializes contract with DAAR, DAARION, and owner (wallet1)

== Staff Top-Up ==
Staff -> APRStaking : DAAR.transfer(walletR, amount)
note right: Staff sends DAAR to walletR (this contract), tax-free
APRStaking -> Staff : emit DAAR.Transfer(staff, walletR, amount)
note right: DAAR contract emits Transfer event

== Stake DAARION ==
User -> APRStaking : stakeDAARION(amount)
APRStaking -> APRStaking : _updatePools()
note right: Detects new DAAR balance, caps DAARION rewards at 4% APR
APRStaking -> User : DAARION.transferFrom(user, this, amount)
APRStaking -> User : emit StakeDAARIONEvent(user, amount)

== Unstake DAARION ==
User -> APRStaking : unstakeDAARION(amount)
APRStaking -> APRStaking : _updatePools()
note right: Detects new DAAR balance, caps DAARION rewards at 4% APR
APRStaking -> User : DAARION.transfer(user, amount)
APRStaking -> User : emit UnstakeDAARIONEvent(user, amount)

== Stake DAAR ==
User -> APRStaking : stakeDAAR(amount)
APRStaking -> APRStaking : _updatePools()
note right: Detects new DAAR balance, caps DAAR rewards at 20% APR
APRStaking -> User : DAAR.transferFrom(user, this, amount)
APRStaking -> User : emit StakeDAAREvent(user, amount)

== Unstake DAAR ==
User -> APRStaking : unstakeDAAR(amount)
APRStaking -> APRStaking : _updatePools()
note right: Detects new DAAR balance, caps DAAR rewards at 20% APR
APRStaking -> User : DAAR.transfer(user, amount)
APRStaking -> User : emit UnstakeDAAREvent(user, amount)

== Claim Rewards ==
User -> APRStaking : claimReward()
APRStaking -> APRStaking : _updatePools()
note right: Calculates rewards for DAARION (4% APR) and DAAR (20% APR)
APRStaking -> User : DAAR.transfer(user, totalReward)
APRStaking -> User : emit RewardClaimed(user, totalReward)

== Withdraw Excess Tokens ==
Owner -> APRStaking : withdrawExcessTokens(token, amount)
alt token == DAARION
    APRStaking -> Owner : DAARION.transfer(owner, amount)
else token == DAAR
    APRStaking -> Owner : DAAR.transfer(owner, amount)
end
APRStaking -> Owner : emit ExcessTokensWithdrawn(owner, amount, token)

== Pause Contract ==
Owner -> APRStaking : pause()
APRStaking -> Owner : emit Paused event

== Unpause Contract ==
Owner -> APRStaking : unpause()
APRStaking -> Owner : emit Unpaused event

@enduml